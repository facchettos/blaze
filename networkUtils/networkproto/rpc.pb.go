// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package networkproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MessageType possibilities include but are not limited to :
//  "connrequest"
//  "connChallenge"
//  "challengeAnswer"
//  "ACK"
//  "NACK"
//  "EOF"
type ACKNACK struct {
	MessageType          string   `protobuf:"bytes,1,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	ACK                  uint64   `protobuf:"varint,2,opt,name=ACK,proto3" json:"ACK,omitempty"`
	NACKs                []uint64 `protobuf:"varint,3,rep,packed,name=NACKs,proto3" json:"NACKs,omitempty"`
	Hash                 []byte   `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ToDecrypt            []byte   `protobuf:"bytes,5,opt,name=ToDecrypt,proto3" json:"ToDecrypt,omitempty"`
	KeyToUse             string   `protobuf:"bytes,6,opt,name=keyToUse,proto3" json:"keyToUse,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACKNACK) Reset()         { *m = ACKNACK{} }
func (m *ACKNACK) String() string { return proto.CompactTextString(m) }
func (*ACKNACK) ProtoMessage()    {}
func (*ACKNACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_f07d14b53668e04e, []int{0}
}
func (m *ACKNACK) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ACKNACK.Unmarshal(m, b)
}
func (m *ACKNACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ACKNACK.Marshal(b, m, deterministic)
}
func (dst *ACKNACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACKNACK.Merge(dst, src)
}
func (m *ACKNACK) XXX_Size() int {
	return xxx_messageInfo_ACKNACK.Size(m)
}
func (m *ACKNACK) XXX_DiscardUnknown() {
	xxx_messageInfo_ACKNACK.DiscardUnknown(m)
}

var xxx_messageInfo_ACKNACK proto.InternalMessageInfo

func (m *ACKNACK) GetMessageType() string {
	if m != nil {
		return m.MessageType
	}
	return ""
}

func (m *ACKNACK) GetACK() uint64 {
	if m != nil {
		return m.ACK
	}
	return 0
}

func (m *ACKNACK) GetNACKs() []uint64 {
	if m != nil {
		return m.NACKs
	}
	return nil
}

func (m *ACKNACK) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ACKNACK) GetToDecrypt() []byte {
	if m != nil {
		return m.ToDecrypt
	}
	return nil
}

func (m *ACKNACK) GetKeyToUse() string {
	if m != nil {
		return m.KeyToUse
	}
	return ""
}

func init() {
	proto.RegisterType((*ACKNACK)(nil), "networkproto.ACKNACK")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_rpc_f07d14b53668e04e) }

var fileDescriptor_rpc_f07d14b53668e04e = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc9, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0x06, 0xf3,
	0x94, 0x16, 0x32, 0x72, 0xb1, 0x3b, 0x3a, 0x7b, 0xfb, 0x39, 0x3a, 0x7b, 0x0b, 0x29, 0x70, 0x71,
	0xfb, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x86, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0x21, 0x0b, 0x09, 0x09, 0x70, 0x31, 0x3b, 0x3a, 0x7b, 0x4b, 0x30, 0x29, 0x30, 0x6a,
	0xb0, 0x04, 0x81, 0x98, 0x42, 0x22, 0x5c, 0xac, 0x20, 0xbd, 0xc5, 0x12, 0xcc, 0x0a, 0xcc, 0x1a,
	0x2c, 0x41, 0x10, 0x8e, 0x90, 0x10, 0x17, 0x8b, 0x47, 0x62, 0x71, 0x86, 0x04, 0x8b, 0x02, 0xa3,
	0x06, 0x4f, 0x10, 0x98, 0x2d, 0x24, 0xc3, 0xc5, 0x19, 0x92, 0xef, 0x92, 0x9a, 0x5c, 0x54, 0x59,
	0x50, 0x22, 0xc1, 0x0a, 0x96, 0x40, 0x08, 0x08, 0x49, 0x71, 0x71, 0x64, 0xa7, 0x56, 0x86, 0xe4,
	0x87, 0x16, 0xa7, 0x4a, 0xb0, 0x81, 0x2d, 0x86, 0xf3, 0x93, 0xd8, 0xc0, 0x4e, 0x35, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x8e, 0x55, 0xe0, 0xec, 0xc5, 0x00, 0x00, 0x00,
}
